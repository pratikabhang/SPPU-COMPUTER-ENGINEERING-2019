class Set:
    def __init__(self):
        self.elements = []

    def is_empty(self):
        return len(self.elements) == 0

    def size(self):
        return len(self.elements)

    def contains(self, element):
        return element in self.elements

    def add(self, element):
        if not self.contains(element):
            self.elements.append(element)

    def remove(self, element):
        if self.contains(element):
            self.elements.remove(element)

    def union(self, other_set):
        union_set = Set()
        union_set.elements = self.elements.copy()

        for element in other_set.elements:
            union_set.add(element)

        return union_set

    def intersection(self, other_set):
        intersection_set = Set()

        for element in self.elements:
            if other_set.contains(element):
                intersection_set.add(element)

        return intersection_set

    def difference(self, other_set):
        difference_set = Set()

        for element in self.elements:
            if not other_set.contains(element):
                difference_set.add(element)

        return difference_set

    def input_elements(self):
        n = int(input("Enter the number of elements: "))
        print("Enter the elements:")
        for _ in range(n):
            element = input()
            self.add(element)

    def display_elements(self):
        print("Set elements:", self.elements)


# Example usage:
set1 = Set()
set1.input_elements()

set2 = Set()
set2.input_elements()

print("Set 1:")
set1.display_elements()

print("Set 2:")
set2.display_elements()

# Perform set operations
union_set = set1.union(set2)
print("Union set:")
union_set.display_elements()

intersection_set = set1.intersection(set2)
print("Intersection set:")
intersection_set.display_elements()

difference_set = set1.difference(set2)
print("Difference set (set1 - set2):")
difference_set.display_elements()
