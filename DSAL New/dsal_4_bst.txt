#include <iostream>
using namespace std;
struct Node {
    int data;
    Node* left;
    Node* right;
};
Node* createNode(int value) {
    Node* newNode = new Node();
    if (!newNode) {
        cout << "Memory error\n";
        return NULL;
    }
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}
Node* insertNode(Node* root, int value) {
    if (root == NULL) {
        return createNode(value);
    }

    if (value < root->data) {
        root->left = insertNode(root->left, value);
    } else if (value > root->data) {
        root->right = insertNode(root->right, value);
    }

    return root;
}
int longestPath(Node* root) {
    if (root == NULL)
        return 0;
    else {
        int leftDepth = longestPath(root->left);
        int rightDepth = longestPath(root->right);

        return max(leftDepth, rightDepth) + 1;
    }
}
bool searchValue(Node* root, int value) {
    if (root == NULL)
        return false;

    if (root->data == value)
        return true;

    if (value < root->data)
        return searchValue(root->left, value);
    else
        return searchValue(root->right, value);
}
void displayData(Node* root) {
    if (root == NULL)
        return;

    displayData(root->left);
    cout << root->data << " ";
    displayData(root->right);
}
void displayMenu() {
    cout << "\nMenu:\n";
    cout << "1. Insert a new node\n";
    cout << "2. Find the number of nodes in the longest path from root\n";
    cout << "3. Search for a value\n";
    cout << "4. Display the data\n";
    cout << "5. Exit\n";
    cout << "Enter your choice: ";
}
int main() {
    Node* root = NULL;
    int values[] = {};
    int numValues = sizeof(values) / sizeof(values[0]);

    for (int i = 0; i < numValues; i++) {
        root = insertNode(root, values[i]);
    }
    int choice, value;
    bool found;
    while (true) {
        displayMenu();
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "Enter a value to insert: ";
            cin >> value;
            root = insertNode(root, value);
            cout << "Node inserted successfully.\n";
            break;
        case 2:
            cout << "Number of nodes in the longest path from root: " << longestPath(root) << endl;
            break;
        case 3:
            cout << "Enter a value to search: ";
            cin >> value;
            found = searchValue(root, value);
            if (found)
                cout << "Value found in the tree.\n";
            else
                cout << "Value not found in the tree.\n";
            break;
        case 4:
            cout << "Data of the tree: ";
            displayData(root);
            cout << endl;
            break;
        case 5:
            cout << "Exiting the program.\n";
            exit(0);
        default:
            cout << "Invalid choice. Please try again.\n";
        }
    }
    return 0;
}