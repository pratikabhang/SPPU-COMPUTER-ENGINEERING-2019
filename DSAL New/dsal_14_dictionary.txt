#include <iostream>
using namespace std;
struct Node {
    string keyword;
    string meaning;
    int height;
    Node* left;
    Node* right;
};
int getHeight(Node* node) {
    if (node == NULL) {
        return -1;
    }
    return node->height;
}
int getBalanceFactor(Node* node) {
    if (node == NULL) {
        return 0;
    }
    return getHeight(node->left) - getHeight(node->right);
}
void updateHeight(Node* node) {
    node->height = max(getHeight(node->left), getHeight(node->right)) + 1;
}
Node* rotateRight(Node* node) {
    Node* newRoot = node->left;
    node->left = newRoot->right;
    newRoot->right = node;
    updateHeight(node);
    updateHeight(newRoot);
    return newRoot;
}
Node* rotateLeft(Node* node) {
    Node* newRoot = node->right;
    node->right = newRoot->left;
    newRoot->left = node;
    updateHeight(node);
    updateHeight(newRoot);
    return newRoot;
}
Node* balance(Node* node) {
    if (node == NULL) {
        return NULL;
    }
    updateHeight(node);
    if (getBalanceFactor(node) == 2) {
        if (getBalanceFactor(node->left) < 0) {
            node->left = rotateLeft(node->left);
        }
        return rotateRight(node);
    } else if (getBalanceFactor(node) == -2) {
        if (getBalanceFactor(node->right) > 0) {
            node->right = rotateRight(node->right);
        }
        return rotateLeft(node);
    }
    return node;
}
Node* createNode(string keyword, string meaning) {
    Node* newNode = new Node;
    newNode->keyword = keyword;
    newNode->meaning = meaning;
    newNode->height = 0;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
Node* insert(Node* root, string keyword, string meaning) {
    if (root == NULL) {
        return createNode(keyword, meaning);
    }
    if (keyword < root->keyword) {
        root->left = insert(root->left, keyword, meaning);
    } else if (keyword > root->keyword) {
        root->right = insert(root->right, keyword, meaning);
    } else {
        cout << "Keyword already exists in the dictionary." << endl;
        return root;
    }
    return balance(root);
}
Node* findMinimum(Node* root) {
    if (root == NULL) {
        return NULL;
    }
    if (root->left == NULL) {
        return root;
    }
    return findMinimum(root->left);
}
Node* remove(Node* root, string keyword) {
    if (root == NULL) {
        cout << "Keyword not found in the dictionary." << endl;
        return NULL;
    }
    if (keyword < root->keyword) {
        root->left = remove(root->left, keyword);
    } else if (keyword > root->keyword) {
        root->right = remove(root->right, keyword);
    } else {
        if (root->left == NULL && root->right == NULL) {
            delete root;
            return NULL;
        } else if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        } else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        } else {
            Node* minNode = findMinimum(root->right);
            root->keyword = minNode->keyword;
            root->meaning = minNode->meaning;
            root->right = remove(root->right, minNode->keyword);
        }
    }
    return balance(root);
}
void displayAscending(Node* root) {
    if (root == NULL) {
        return;
    }
    displayAscending(root->left);
    cout << root->keyword << ": " << root->meaning << endl;
    displayAscending(root->right);
}
void displayDescending(Node* root) {
    if (root == NULL) {
        return;
    }
    displayDescending(root->right);
    cout << root->keyword << ": " << root->meaning << endl;
    displayDescending(root->left);
}
int countMaxComparisons(Node* root, string keyword, int count) {
    if (root == NULL) {
        return count;
    }
    if (keyword == root->keyword) {
        return count + 1;
    } else if (keyword < root->keyword) {
        return countMaxComparisons(root->left, keyword, count + 1);
    } else {
        return countMaxComparisons(root->right, keyword, count + 1);
    }
}
int main() {
    Node* root = NULL;
    int choice;
    while (true) {
        cout << "********** Dictionary **********" << endl;
        cout << "1. Add Keyword" << endl;
        cout << "2. Delete Keyword" << endl;
        cout << "3. Display Ascending Order" << endl;
        cout << "4. Display Descending Order" << endl;
        cout << "5. Find Maximum Comparisons" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice) {
            case 1: {
                string keyword, meaning;
                cout << "Enter keyword: ";
                cin >> keyword;
                cout << "Enter meaning: ";
                cin.ignore();
                getline(cin, meaning);
                root = insert(root, keyword, meaning);
                cout << "Keyword added successfully!" << endl;
                break;
            }
            case 2: {
                string keyword;
                cout << "Enter keyword to delete: ";
                cin >> keyword;
                root = remove(root, keyword);
                cout << "Keyword deleted successfully!" << endl;
                break;
            }
            case 3: {
                cout << "Dictionary in Ascending Order:" << endl;
                displayAscending(root);
                break;
            }
            case 4: {
                cout << "Dictionary in Descending Order:" << endl;
                displayDescending(root);
                break;
            }
            case 5: {
                string keyword;
                cout << "Enter keyword to find: ";
                cin >> keyword;
                int maxComparisons = countMaxComparisons(root, keyword, 0);
                cout << "Maximum comparisons required: " << maxComparisons << endl;
                break;
            }
            case 6: {
                cout << "Exiting program..." << endl;
                return 0;
            }
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
        cout << endl;
    }
    return 0;
}