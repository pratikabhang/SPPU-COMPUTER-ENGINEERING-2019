#include<iostream>
#include<cstring>
#include<stack>
#include<queue>
using namespace std;
int vis[10];
int a[10][10];
int weight;
void create_graph(int n,string CityNames[]){
for(int i=0 ; i<n ;i++){
cout << "Enter name of cities - ";
cin >> CityNames[i]; 
}
for(int j=0 ; j<n ; j++){
for(int k=0 ; k<n ; k++){ 
a[j][k] = 0;
}
}
cout << "\nAssigning distance between Cities - ";
for(int l=0 ; l<n ; l++){
for(int m=0 ; m<n ; m++){ 
if(a[l][m] == 0 && l != m){
cout << "\nEnter distance from "<< CityNames[l] << " to " << 
CityNames[m] << " - ";
cin >> weight;
a[l][m] = a[m][l] = weight;
}
}
}
}
void DFS(int n,string CityNames[]){
cout << "DFS Traversal : " << endl;
for(int i=0 ; i<n ; i++){
vis[i]=0;
}
stack <int> s;
s.push(0);
while(!s.empty()){
int node = s.top();
s.pop();
if(vis[node] == 0){
cout << CityNames[node] << " ";
vis[node] = 1;
for(int i=0 ; i<n ; i++){
if(a[node][i]!=0){
s.push(i);
}
}
}
}
}
void BFS(int n,string CityNames[]){
cout << "BFS Traversal : " << endl;
for(int i = 0 ; i<n ; i++){
vis[i]=0;
}
queue<int>q;
q.push(0);
vis[0]=1;
while(!q.empty()){
int node = q.front();
q.pop();
cout << CityNames[node] << " ";
for(int i=0 ; i<n ; i++){
if(a[node][i]!=0 && vis[i]==0){
q.push(i);
vis[i]=1;
}
}
}
cout<<endl;
}
void display(int n,string CityNames[]){
cout << "Printing Graph" << endl << endl;
for(int i = 0;i<n;i++){
cout << CityNames[i] << " ";
for(int j = 0 ; j<n ; j++){
cout << a[i][j] << " ";
}
cout << endl;
}
}
void isconnected(int n){
cout<<endl;
for(int i= 0 ; i<n ; i++){
if(vis[i] == 0){
cout<<"Not Connected"<<endl;
break;
}
}
cout<<"Connected"<<endl;
}
int main(){
string CityNames[10];
int n, ch;
cout << "Enter number of cities - ";
cin >> n;
while(true){
cout<<"Enter 1 for creating the graph: "<<endl;
cout<<"Enter 2 for display the graph: "<<endl;
cout<<"Enter 3 for DFS Traversal: "<<endl;
cout<<"Enter 4 for BFS Traversal: "<<endl;
cout<<"Enter 5 for Checking Connected or Not: "<<endl;
cin>>ch;
if(ch==1){
cout<<endl;
create_graph(n,CityNames);
cout<<endl;
}
else if(ch==2){
cout<<endl;
display(n,CityNames);
cout<<endl;
}
else if(ch==3){
cout<<endl;
DFS(n,CityNames);
cout<<endl;
}
else if(ch==4){
cout<<endl;
BFS(n,CityNames);
cout<<endl;
}
else if(ch==5){
cout<<endl;
isconnected(n);
cout<<endl;
}
else{
cout<<"Exiting..."<<endl;
break;
}
}
return 0;
}
